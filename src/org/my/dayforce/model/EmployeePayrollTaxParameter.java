/*
 * Dayforce API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.my.dayforce.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;


import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
import org.my.dayforce.model.EmployeePayrollTaxParameterElement;

/**
 * EmployeePayrollTaxParameter
 */

public class EmployeePayrollTaxParameter {
  @SerializedName("EffectiveStart")
  private DateTime effectiveStart = null;

  @SerializedName("EffectiveEnd")
  private DateTime effectiveEnd = null;

  @SerializedName("ExemptTaxOnlyUpdateWages")
  private Boolean exemptTaxOnlyUpdateWages = null;

  @SerializedName("ExemptTaxAndTaxableWages")
  private Boolean exemptTaxAndTaxableWages = null;

  @SerializedName("InactivateTax")
  private Boolean inactivateTax = null;

  @SerializedName("TaxAuthorityInstance")
  private String taxAuthorityInstance = null;

  @SerializedName("LegalEntityXrefCode")
  private String legalEntityXrefCode = null;

  @SerializedName("OverrideParameters")
  private List<EmployeePayrollTaxParameterElement> overrideParameters = new ArrayList<EmployeePayrollTaxParameterElement>();

  @SerializedName("LastModifiedTimestamp")
  private DateTime lastModifiedTimestamp = null;

  public EmployeePayrollTaxParameter effectiveStart(DateTime effectiveStart) {
    this.effectiveStart = effectiveStart;
    return this;
  }

   /**
   * Get effectiveStart
   * @return effectiveStart
  **/
 
  public DateTime getEffectiveStart() {
    return effectiveStart;
  }

  public void setEffectiveStart(DateTime effectiveStart) {
    this.effectiveStart = effectiveStart;
  }

  public EmployeePayrollTaxParameter effectiveEnd(DateTime effectiveEnd) {
    this.effectiveEnd = effectiveEnd;
    return this;
  }

   /**
   * Get effectiveEnd
   * @return effectiveEnd
  **/
 
  public DateTime getEffectiveEnd() {
    return effectiveEnd;
  }

  public void setEffectiveEnd(DateTime effectiveEnd) {
    this.effectiveEnd = effectiveEnd;
  }

  public EmployeePayrollTaxParameter exemptTaxOnlyUpdateWages(Boolean exemptTaxOnlyUpdateWages) {
    this.exemptTaxOnlyUpdateWages = exemptTaxOnlyUpdateWages;
    return this;
  }

   /**
   * Get exemptTaxOnlyUpdateWages
   * @return exemptTaxOnlyUpdateWages
  **/
 
  public Boolean getExemptTaxOnlyUpdateWages() {
    return exemptTaxOnlyUpdateWages;
  }

  public void setExemptTaxOnlyUpdateWages(Boolean exemptTaxOnlyUpdateWages) {
    this.exemptTaxOnlyUpdateWages = exemptTaxOnlyUpdateWages;
  }

  public EmployeePayrollTaxParameter exemptTaxAndTaxableWages(Boolean exemptTaxAndTaxableWages) {
    this.exemptTaxAndTaxableWages = exemptTaxAndTaxableWages;
    return this;
  }

   /**
   * Get exemptTaxAndTaxableWages
   * @return exemptTaxAndTaxableWages
  **/
 
  public Boolean getExemptTaxAndTaxableWages() {
    return exemptTaxAndTaxableWages;
  }

  public void setExemptTaxAndTaxableWages(Boolean exemptTaxAndTaxableWages) {
    this.exemptTaxAndTaxableWages = exemptTaxAndTaxableWages;
  }

  public EmployeePayrollTaxParameter inactivateTax(Boolean inactivateTax) {
    this.inactivateTax = inactivateTax;
    return this;
  }

   /**
   * Get inactivateTax
   * @return inactivateTax
  **/
 
  public Boolean getInactivateTax() {
    return inactivateTax;
  }

  public void setInactivateTax(Boolean inactivateTax) {
    this.inactivateTax = inactivateTax;
  }

  public EmployeePayrollTaxParameter taxAuthorityInstance(String taxAuthorityInstance) {
    this.taxAuthorityInstance = taxAuthorityInstance;
    return this;
  }

   /**
   * Get taxAuthorityInstance
   * @return taxAuthorityInstance
  **/
 
  public String getTaxAuthorityInstance() {
    return taxAuthorityInstance;
  }

  public void setTaxAuthorityInstance(String taxAuthorityInstance) {
    this.taxAuthorityInstance = taxAuthorityInstance;
  }

  public EmployeePayrollTaxParameter legalEntityXrefCode(String legalEntityXrefCode) {
    this.legalEntityXrefCode = legalEntityXrefCode;
    return this;
  }

   /**
   * Get legalEntityXrefCode
   * @return legalEntityXrefCode
  **/
 
  public String getLegalEntityXrefCode() {
    return legalEntityXrefCode;
  }

  public void setLegalEntityXrefCode(String legalEntityXrefCode) {
    this.legalEntityXrefCode = legalEntityXrefCode;
  }

  public EmployeePayrollTaxParameter overrideParameters(List<EmployeePayrollTaxParameterElement> overrideParameters) {
    this.overrideParameters = overrideParameters;
    return this;
  }

  public EmployeePayrollTaxParameter addOverrideParametersItem(EmployeePayrollTaxParameterElement overrideParametersItem) {
    this.overrideParameters.add(overrideParametersItem);
    return this;
  }

   /**
   * Get overrideParameters
   * @return overrideParameters
  **/
 
  public List<EmployeePayrollTaxParameterElement> getOverrideParameters() {
    return overrideParameters;
  }

  public void setOverrideParameters(List<EmployeePayrollTaxParameterElement> overrideParameters) {
    this.overrideParameters = overrideParameters;
  }

  public EmployeePayrollTaxParameter lastModifiedTimestamp(DateTime lastModifiedTimestamp) {
    this.lastModifiedTimestamp = lastModifiedTimestamp;
    return this;
  }

   /**
   * Get lastModifiedTimestamp
   * @return lastModifiedTimestamp
  **/
 
  public DateTime getLastModifiedTimestamp() {
    return lastModifiedTimestamp;
  }

  public void setLastModifiedTimestamp(DateTime lastModifiedTimestamp) {
    this.lastModifiedTimestamp = lastModifiedTimestamp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeePayrollTaxParameter employeePayrollTaxParameter = (EmployeePayrollTaxParameter) o;
    return Objects.equals(this.effectiveStart, employeePayrollTaxParameter.effectiveStart) &&
        Objects.equals(this.effectiveEnd, employeePayrollTaxParameter.effectiveEnd) &&
        Objects.equals(this.exemptTaxOnlyUpdateWages, employeePayrollTaxParameter.exemptTaxOnlyUpdateWages) &&
        Objects.equals(this.exemptTaxAndTaxableWages, employeePayrollTaxParameter.exemptTaxAndTaxableWages) &&
        Objects.equals(this.inactivateTax, employeePayrollTaxParameter.inactivateTax) &&
        Objects.equals(this.taxAuthorityInstance, employeePayrollTaxParameter.taxAuthorityInstance) &&
        Objects.equals(this.legalEntityXrefCode, employeePayrollTaxParameter.legalEntityXrefCode) &&
        Objects.equals(this.overrideParameters, employeePayrollTaxParameter.overrideParameters) &&
        Objects.equals(this.lastModifiedTimestamp, employeePayrollTaxParameter.lastModifiedTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveStart, effectiveEnd, exemptTaxOnlyUpdateWages, exemptTaxAndTaxableWages, inactivateTax, taxAuthorityInstance, legalEntityXrefCode, overrideParameters, lastModifiedTimestamp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeePayrollTaxParameter {\n");
    
    sb.append("    effectiveStart: ").append(toIndentedString(effectiveStart)).append("\n");
    sb.append("    effectiveEnd: ").append(toIndentedString(effectiveEnd)).append("\n");
    sb.append("    exemptTaxOnlyUpdateWages: ").append(toIndentedString(exemptTaxOnlyUpdateWages)).append("\n");
    sb.append("    exemptTaxAndTaxableWages: ").append(toIndentedString(exemptTaxAndTaxableWages)).append("\n");
    sb.append("    inactivateTax: ").append(toIndentedString(inactivateTax)).append("\n");
    sb.append("    taxAuthorityInstance: ").append(toIndentedString(taxAuthorityInstance)).append("\n");
    sb.append("    legalEntityXrefCode: ").append(toIndentedString(legalEntityXrefCode)).append("\n");
    sb.append("    overrideParameters: ").append(toIndentedString(overrideParameters)).append("\n");
    sb.append("    lastModifiedTimestamp: ").append(toIndentedString(lastModifiedTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

