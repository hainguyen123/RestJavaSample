/*
 * Dayforce API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.my.dayforce.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;


import org.joda.time.DateTime;
import org.my.dayforce.model.Docket;
import org.my.dayforce.model.Location;
import org.my.dayforce.model.PayAdjCode;
import org.my.dayforce.model.Position;
import org.my.dayforce.model.Project;

/**
 * EmployeeDefaultLabor
 */

public class EmployeeDefaultLabor {
  @SerializedName("Position")
  private Position position = null;

  @SerializedName("EffectiveEnd")
  private DateTime effectiveEnd = null;

  @SerializedName("EffectiveStart")
  private DateTime effectiveStart = null;

  @SerializedName("Location")
  private Location location = null;

  @SerializedName("PayAdjCode")
  private PayAdjCode payAdjCode = null;

  @SerializedName("Project")
  private Project project = null;

  @SerializedName("Docket")
  private Docket docket = null;

  @SerializedName("LastModifiedTimestamp")
  private DateTime lastModifiedTimestamp = null;

  public EmployeeDefaultLabor position(Position position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
 
  public Position getPosition() {
    return position;
  }

  public void setPosition(Position position) {
    this.position = position;
  }

  public EmployeeDefaultLabor effectiveEnd(DateTime effectiveEnd) {
    this.effectiveEnd = effectiveEnd;
    return this;
  }

   /**
   * Get effectiveEnd
   * @return effectiveEnd
  **/
 
  public DateTime getEffectiveEnd() {
    return effectiveEnd;
  }

  public void setEffectiveEnd(DateTime effectiveEnd) {
    this.effectiveEnd = effectiveEnd;
  }

  public EmployeeDefaultLabor effectiveStart(DateTime effectiveStart) {
    this.effectiveStart = effectiveStart;
    return this;
  }

   /**
   * Get effectiveStart
   * @return effectiveStart
  **/
 
  public DateTime getEffectiveStart() {
    return effectiveStart;
  }

  public void setEffectiveStart(DateTime effectiveStart) {
    this.effectiveStart = effectiveStart;
  }

  public EmployeeDefaultLabor location(Location location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
 
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }

  public EmployeeDefaultLabor payAdjCode(PayAdjCode payAdjCode) {
    this.payAdjCode = payAdjCode;
    return this;
  }

   /**
   * Get payAdjCode
   * @return payAdjCode
  **/
 
  public PayAdjCode getPayAdjCode() {
    return payAdjCode;
  }

  public void setPayAdjCode(PayAdjCode payAdjCode) {
    this.payAdjCode = payAdjCode;
  }

  public EmployeeDefaultLabor project(Project project) {
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
 
  public Project getProject() {
    return project;
  }

  public void setProject(Project project) {
    this.project = project;
  }

  public EmployeeDefaultLabor docket(Docket docket) {
    this.docket = docket;
    return this;
  }

   /**
   * Get docket
   * @return docket
  **/
 
  public Docket getDocket() {
    return docket;
  }

  public void setDocket(Docket docket) {
    this.docket = docket;
  }

  public EmployeeDefaultLabor lastModifiedTimestamp(DateTime lastModifiedTimestamp) {
    this.lastModifiedTimestamp = lastModifiedTimestamp;
    return this;
  }

   /**
   * Get lastModifiedTimestamp
   * @return lastModifiedTimestamp
  **/
 
  public DateTime getLastModifiedTimestamp() {
    return lastModifiedTimestamp;
  }

  public void setLastModifiedTimestamp(DateTime lastModifiedTimestamp) {
    this.lastModifiedTimestamp = lastModifiedTimestamp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeDefaultLabor employeeDefaultLabor = (EmployeeDefaultLabor) o;
    return Objects.equals(this.position, employeeDefaultLabor.position) &&
        Objects.equals(this.effectiveEnd, employeeDefaultLabor.effectiveEnd) &&
        Objects.equals(this.effectiveStart, employeeDefaultLabor.effectiveStart) &&
        Objects.equals(this.location, employeeDefaultLabor.location) &&
        Objects.equals(this.payAdjCode, employeeDefaultLabor.payAdjCode) &&
        Objects.equals(this.project, employeeDefaultLabor.project) &&
        Objects.equals(this.docket, employeeDefaultLabor.docket) &&
        Objects.equals(this.lastModifiedTimestamp, employeeDefaultLabor.lastModifiedTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(position, effectiveEnd, effectiveStart, location, payAdjCode, project, docket, lastModifiedTimestamp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeDefaultLabor {\n");
    
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    effectiveEnd: ").append(toIndentedString(effectiveEnd)).append("\n");
    sb.append("    effectiveStart: ").append(toIndentedString(effectiveStart)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    payAdjCode: ").append(toIndentedString(payAdjCode)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    docket: ").append(toIndentedString(docket)).append("\n");
    sb.append("    lastModifiedTimestamp: ").append(toIndentedString(lastModifiedTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

