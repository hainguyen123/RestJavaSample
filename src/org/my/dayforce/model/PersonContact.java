/*
 * Dayforce API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.my.dayforce.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;


import org.joda.time.DateTime;
import org.my.dayforce.model.ContactInformationType;
import org.my.dayforce.model.Country;

/**
 * PersonContact
 */

public class PersonContact {
  @SerializedName("ContactNumber")
  private String contactNumber = null;

  @SerializedName("Country")
  private Country country = null;

  @SerializedName("ElectronicAddress")
  private String electronicAddress = null;

  @SerializedName("Extension")
  private String extension = null;

  @SerializedName("EffectiveStart")
  private DateTime effectiveStart = null;

  @SerializedName("EffectiveEnd")
  private DateTime effectiveEnd = null;

  @SerializedName("ContactInformationType")
  private ContactInformationType contactInformationType = null;

  @SerializedName("IsForSystemCommunications")
  private Boolean isForSystemCommunications = null;

  @SerializedName("IsPreferredContactMethod")
  private Boolean isPreferredContactMethod = null;

  @SerializedName("IsUnlistedNumber")
  private Boolean isUnlistedNumber = null;

  @SerializedName("FormattedNumber")
  private String formattedNumber = null;

  @SerializedName("IsVerified")
  private Boolean isVerified = null;

  @SerializedName("IsRejected")
  private Boolean isRejected = null;

  @SerializedName("ShowRejectedWarning")
  private Boolean showRejectedWarning = null;

  @SerializedName("NumberOfVerificationRequests")
  private Integer numberOfVerificationRequests = null;

  @SerializedName("LastModifiedTimestamp")
  private DateTime lastModifiedTimestamp = null;

  public PersonContact contactNumber(String contactNumber) {
    this.contactNumber = contactNumber;
    return this;
  }

   /**
   * Get contactNumber
   * @return contactNumber
  **/
 
  public String getContactNumber() {
    return contactNumber;
  }

  public void setContactNumber(String contactNumber) {
    this.contactNumber = contactNumber;
  }

  public PersonContact country(Country country) {
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
 
  public Country getCountry() {
    return country;
  }

  public void setCountry(Country country) {
    this.country = country;
  }

  public PersonContact electronicAddress(String electronicAddress) {
    this.electronicAddress = electronicAddress;
    return this;
  }

   /**
   * Get electronicAddress
   * @return electronicAddress
  **/
 
  public String getElectronicAddress() {
    return electronicAddress;
  }

  public void setElectronicAddress(String electronicAddress) {
    this.electronicAddress = electronicAddress;
  }

  public PersonContact extension(String extension) {
    this.extension = extension;
    return this;
  }

   /**
   * Get extension
   * @return extension
  **/
 
  public String getExtension() {
    return extension;
  }

  public void setExtension(String extension) {
    this.extension = extension;
  }

  public PersonContact effectiveStart(DateTime effectiveStart) {
    this.effectiveStart = effectiveStart;
    return this;
  }

   /**
   * Get effectiveStart
   * @return effectiveStart
  **/
 
  public DateTime getEffectiveStart() {
    return effectiveStart;
  }

  public void setEffectiveStart(DateTime effectiveStart) {
    this.effectiveStart = effectiveStart;
  }

  public PersonContact effectiveEnd(DateTime effectiveEnd) {
    this.effectiveEnd = effectiveEnd;
    return this;
  }

   /**
   * Get effectiveEnd
   * @return effectiveEnd
  **/
 
  public DateTime getEffectiveEnd() {
    return effectiveEnd;
  }

  public void setEffectiveEnd(DateTime effectiveEnd) {
    this.effectiveEnd = effectiveEnd;
  }

  public PersonContact contactInformationType(ContactInformationType contactInformationType) {
    this.contactInformationType = contactInformationType;
    return this;
  }

   /**
   * Get contactInformationType
   * @return contactInformationType
  **/
 
  public ContactInformationType getContactInformationType() {
    return contactInformationType;
  }

  public void setContactInformationType(ContactInformationType contactInformationType) {
    this.contactInformationType = contactInformationType;
  }

  public PersonContact isForSystemCommunications(Boolean isForSystemCommunications) {
    this.isForSystemCommunications = isForSystemCommunications;
    return this;
  }

   /**
   * Get isForSystemCommunications
   * @return isForSystemCommunications
  **/
 
  public Boolean getIsForSystemCommunications() {
    return isForSystemCommunications;
  }

  public void setIsForSystemCommunications(Boolean isForSystemCommunications) {
    this.isForSystemCommunications = isForSystemCommunications;
  }

  public PersonContact isPreferredContactMethod(Boolean isPreferredContactMethod) {
    this.isPreferredContactMethod = isPreferredContactMethod;
    return this;
  }

   /**
   * Get isPreferredContactMethod
   * @return isPreferredContactMethod
  **/
 
  public Boolean getIsPreferredContactMethod() {
    return isPreferredContactMethod;
  }

  public void setIsPreferredContactMethod(Boolean isPreferredContactMethod) {
    this.isPreferredContactMethod = isPreferredContactMethod;
  }

  public PersonContact isUnlistedNumber(Boolean isUnlistedNumber) {
    this.isUnlistedNumber = isUnlistedNumber;
    return this;
  }

   /**
   * Get isUnlistedNumber
   * @return isUnlistedNumber
  **/
 
  public Boolean getIsUnlistedNumber() {
    return isUnlistedNumber;
  }

  public void setIsUnlistedNumber(Boolean isUnlistedNumber) {
    this.isUnlistedNumber = isUnlistedNumber;
  }

  public PersonContact formattedNumber(String formattedNumber) {
    this.formattedNumber = formattedNumber;
    return this;
  }

   /**
   * Get formattedNumber
   * @return formattedNumber
  **/
 
  public String getFormattedNumber() {
    return formattedNumber;
  }

  public void setFormattedNumber(String formattedNumber) {
    this.formattedNumber = formattedNumber;
  }

  public PersonContact isVerified(Boolean isVerified) {
    this.isVerified = isVerified;
    return this;
  }

   /**
   * Get isVerified
   * @return isVerified
  **/
 
  public Boolean getIsVerified() {
    return isVerified;
  }

  public void setIsVerified(Boolean isVerified) {
    this.isVerified = isVerified;
  }

  public PersonContact isRejected(Boolean isRejected) {
    this.isRejected = isRejected;
    return this;
  }

   /**
   * Get isRejected
   * @return isRejected
  **/
 
  public Boolean getIsRejected() {
    return isRejected;
  }

  public void setIsRejected(Boolean isRejected) {
    this.isRejected = isRejected;
  }

  public PersonContact showRejectedWarning(Boolean showRejectedWarning) {
    this.showRejectedWarning = showRejectedWarning;
    return this;
  }

   /**
   * Get showRejectedWarning
   * @return showRejectedWarning
  **/
 
  public Boolean getShowRejectedWarning() {
    return showRejectedWarning;
  }

  public void setShowRejectedWarning(Boolean showRejectedWarning) {
    this.showRejectedWarning = showRejectedWarning;
  }

  public PersonContact numberOfVerificationRequests(Integer numberOfVerificationRequests) {
    this.numberOfVerificationRequests = numberOfVerificationRequests;
    return this;
  }

   /**
   * Get numberOfVerificationRequests
   * @return numberOfVerificationRequests
  **/
 
  public Integer getNumberOfVerificationRequests() {
    return numberOfVerificationRequests;
  }

  public void setNumberOfVerificationRequests(Integer numberOfVerificationRequests) {
    this.numberOfVerificationRequests = numberOfVerificationRequests;
  }

  public PersonContact lastModifiedTimestamp(DateTime lastModifiedTimestamp) {
    this.lastModifiedTimestamp = lastModifiedTimestamp;
    return this;
  }

   /**
   * Get lastModifiedTimestamp
   * @return lastModifiedTimestamp
  **/
 
  public DateTime getLastModifiedTimestamp() {
    return lastModifiedTimestamp;
  }

  public void setLastModifiedTimestamp(DateTime lastModifiedTimestamp) {
    this.lastModifiedTimestamp = lastModifiedTimestamp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonContact personContact = (PersonContact) o;
    return Objects.equals(this.contactNumber, personContact.contactNumber) &&
        Objects.equals(this.country, personContact.country) &&
        Objects.equals(this.electronicAddress, personContact.electronicAddress) &&
        Objects.equals(this.extension, personContact.extension) &&
        Objects.equals(this.effectiveStart, personContact.effectiveStart) &&
        Objects.equals(this.effectiveEnd, personContact.effectiveEnd) &&
        Objects.equals(this.contactInformationType, personContact.contactInformationType) &&
        Objects.equals(this.isForSystemCommunications, personContact.isForSystemCommunications) &&
        Objects.equals(this.isPreferredContactMethod, personContact.isPreferredContactMethod) &&
        Objects.equals(this.isUnlistedNumber, personContact.isUnlistedNumber) &&
        Objects.equals(this.formattedNumber, personContact.formattedNumber) &&
        Objects.equals(this.isVerified, personContact.isVerified) &&
        Objects.equals(this.isRejected, personContact.isRejected) &&
        Objects.equals(this.showRejectedWarning, personContact.showRejectedWarning) &&
        Objects.equals(this.numberOfVerificationRequests, personContact.numberOfVerificationRequests) &&
        Objects.equals(this.lastModifiedTimestamp, personContact.lastModifiedTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactNumber, country, electronicAddress, extension, effectiveStart, effectiveEnd, contactInformationType, isForSystemCommunications, isPreferredContactMethod, isUnlistedNumber, formattedNumber, isVerified, isRejected, showRejectedWarning, numberOfVerificationRequests, lastModifiedTimestamp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonContact {\n");
    
    sb.append("    contactNumber: ").append(toIndentedString(contactNumber)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    electronicAddress: ").append(toIndentedString(electronicAddress)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    effectiveStart: ").append(toIndentedString(effectiveStart)).append("\n");
    sb.append("    effectiveEnd: ").append(toIndentedString(effectiveEnd)).append("\n");
    sb.append("    contactInformationType: ").append(toIndentedString(contactInformationType)).append("\n");
    sb.append("    isForSystemCommunications: ").append(toIndentedString(isForSystemCommunications)).append("\n");
    sb.append("    isPreferredContactMethod: ").append(toIndentedString(isPreferredContactMethod)).append("\n");
    sb.append("    isUnlistedNumber: ").append(toIndentedString(isUnlistedNumber)).append("\n");
    sb.append("    formattedNumber: ").append(toIndentedString(formattedNumber)).append("\n");
    sb.append("    isVerified: ").append(toIndentedString(isVerified)).append("\n");
    sb.append("    isRejected: ").append(toIndentedString(isRejected)).append("\n");
    sb.append("    showRejectedWarning: ").append(toIndentedString(showRejectedWarning)).append("\n");
    sb.append("    numberOfVerificationRequests: ").append(toIndentedString(numberOfVerificationRequests)).append("\n");
    sb.append("    lastModifiedTimestamp: ").append(toIndentedString(lastModifiedTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

