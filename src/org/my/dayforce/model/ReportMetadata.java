/*
 * Dayforce API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.my.dayforce.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;


import java.util.ArrayList;
import java.util.List;
import org.my.dayforce.model.ReportColumnMetadata;
import org.my.dayforce.model.ReportParameterMetadata;

/**
 * This class provides information about a report.
 */

public class ReportMetadata {
  @SerializedName("Name")
  private String name = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("XRefCode")
  private String xrefCode = null;

  @SerializedName("MaxRows")
  private Integer maxRows = null;

  @SerializedName("ColumnMetadata")
  private List<ReportColumnMetadata> columnMetadata = new ArrayList<ReportColumnMetadata>();

  @SerializedName("Parameters")
  private List<ReportParameterMetadata> parameters = new ArrayList<ReportParameterMetadata>();

  public ReportMetadata name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the Report.  The name will be localized, based on the Session Culture.
   * @return name
  **/
 
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ReportMetadata description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the Report.  The description will be localized, based on the Session Culture.
   * @return description
  **/
 
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ReportMetadata xrefCode(String xrefCode) {
    this.xrefCode = xrefCode;
    return this;
  }

   /**
   * Reference Code for the Report.  This is a unique, human readable, code used to identify the Report.
   * @return xrefCode
  **/
  
  public String getXrefCode() {
    return xrefCode;
  }

  public void setXrefCode(String xrefCode) {
    this.xrefCode = xrefCode;
  }

  public ReportMetadata maxRows(Integer maxRows) {
    this.maxRows = maxRows;
    return this;
  }

   /**
   * Maximum number of rows the Report will return as part of it's ResultSet.  If the MaxRows is assigned -1, it will execute to include all possible rows in it's ResultSet.
   * @return maxRows
  **/
 
  public Integer getMaxRows() {
    return maxRows;
  }

  public void setMaxRows(Integer maxRows) {
    this.maxRows = maxRows;
  }

  public ReportMetadata columnMetadata(List<ReportColumnMetadata> columnMetadata) {
    this.columnMetadata = columnMetadata;
    return this;
  }

  public ReportMetadata addColumnMetadataItem(ReportColumnMetadata columnMetadataItem) {
    this.columnMetadata.add(columnMetadataItem);
    return this;
  }

   /**
   * An array of ReportColumnMetadata objects.
   * @return columnMetadata
  **/
  public List<ReportColumnMetadata> getColumnMetadata() {
    return columnMetadata;
  }

  public void setColumnMetadata(List<ReportColumnMetadata> columnMetadata) {
    this.columnMetadata = columnMetadata;
  }

  public ReportMetadata parameters(List<ReportParameterMetadata> parameters) {
    this.parameters = parameters;
    return this;
  }

  public ReportMetadata addParametersItem(ReportParameterMetadata parametersItem) {
    this.parameters.add(parametersItem);
    return this;
  }

   /**
   * Collection of report parameters defined by the report.
   * @return parameters
  **/
  public List<ReportParameterMetadata> getParameters() {
    return parameters;
  }

  public void setParameters(List<ReportParameterMetadata> parameters) {
    this.parameters = parameters;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportMetadata reportMetadata = (ReportMetadata) o;
    return Objects.equals(this.name, reportMetadata.name) &&
        Objects.equals(this.description, reportMetadata.description) &&
        Objects.equals(this.xrefCode, reportMetadata.xrefCode) &&
        Objects.equals(this.maxRows, reportMetadata.maxRows) &&
        Objects.equals(this.columnMetadata, reportMetadata.columnMetadata) &&
        Objects.equals(this.parameters, reportMetadata.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, xrefCode, maxRows, columnMetadata, parameters);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportMetadata {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    xrefCode: ").append(toIndentedString(xrefCode)).append("\n");
    sb.append("    maxRows: ").append(toIndentedString(maxRows)).append("\n");
    sb.append("    columnMetadata: ").append(toIndentedString(columnMetadata)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

