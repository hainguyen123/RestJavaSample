/*
 * Dayforce API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.my.dayforce.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;


import org.joda.time.DateTime;
import org.my.dayforce.model.FinancialInstitution;
import org.my.dayforce.model.PayMethod;

/**
 * EmployeeDirectDeposit
 */

public class EmployeeDirectDeposit {
  @SerializedName("AccountNumber")
  private String accountNumber = null;

  @SerializedName("BankName")
  private String bankName = null;

  @SerializedName("BankNumber")
  private String bankNumber = null;

  @SerializedName("BuildingSocietyNumber")
  private String buildingSocietyNumber = null;

  @SerializedName("DepositNumber")
  private Integer depositNumber = null;

  @SerializedName("DepositValue")
  private Double depositValue = null;

  @SerializedName("PayMethod")
  private PayMethod payMethod = null;

  @SerializedName("IsDeleted")
  private Boolean isDeleted = null;

  @SerializedName("IsPercentage")
  private Boolean isPercentage = null;

  @SerializedName("IsRemainder")
  private Boolean isRemainder = null;

  @SerializedName("NumberOfPreNoteDays")
  private Integer numberOfPreNoteDays = null;

  @SerializedName("PrenoteFileRunPayDate")
  private DateTime prenoteFileRunPayDate = null;

  @SerializedName("PrenoteFileSentOn")
  private DateTime prenoteFileSentOn = null;

  @SerializedName("RequiresPreNote")
  private Boolean requiresPreNote = null;

  @SerializedName("RoutingTransitNumber")
  private String routingTransitNumber = null;

  @SerializedName("PayCardType")
  private String payCardType = null;

  @SerializedName("FinancialInstitution")
  private FinancialInstitution financialInstitution = null;

  @SerializedName("AccountHolder")
  private String accountHolder = null;

  @SerializedName("LastModifiedTimestamp")
  private DateTime lastModifiedTimestamp = null;

  public EmployeeDirectDeposit accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Get accountNumber
   * @return accountNumber
  **/
 
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }

  public EmployeeDirectDeposit bankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

   /**
   * Get bankName
   * @return bankName
  **/
 
  public String getBankName() {
    return bankName;
  }

  public void setBankName(String bankName) {
    this.bankName = bankName;
  }

  public EmployeeDirectDeposit bankNumber(String bankNumber) {
    this.bankNumber = bankNumber;
    return this;
  }

   /**
   * Get bankNumber
   * @return bankNumber
  **/
 
  public String getBankNumber() {
    return bankNumber;
  }

  public void setBankNumber(String bankNumber) {
    this.bankNumber = bankNumber;
  }

  public EmployeeDirectDeposit buildingSocietyNumber(String buildingSocietyNumber) {
    this.buildingSocietyNumber = buildingSocietyNumber;
    return this;
  }

   /**
   * Get buildingSocietyNumber
   * @return buildingSocietyNumber
  **/
 
  public String getBuildingSocietyNumber() {
    return buildingSocietyNumber;
  }

  public void setBuildingSocietyNumber(String buildingSocietyNumber) {
    this.buildingSocietyNumber = buildingSocietyNumber;
  }

  public EmployeeDirectDeposit depositNumber(Integer depositNumber) {
    this.depositNumber = depositNumber;
    return this;
  }

   /**
   * Get depositNumber
   * @return depositNumber
  **/
 
  public Integer getDepositNumber() {
    return depositNumber;
  }

  public void setDepositNumber(Integer depositNumber) {
    this.depositNumber = depositNumber;
  }

  public EmployeeDirectDeposit depositValue(Double depositValue) {
    this.depositValue = depositValue;
    return this;
  }

   /**
   * Get depositValue
   * @return depositValue
  **/
 
  public Double getDepositValue() {
    return depositValue;
  }

  public void setDepositValue(Double depositValue) {
    this.depositValue = depositValue;
  }

  public EmployeeDirectDeposit payMethod(PayMethod payMethod) {
    this.payMethod = payMethod;
    return this;
  }

   /**
   * Get payMethod
   * @return payMethod
  **/
 
  public PayMethod getPayMethod() {
    return payMethod;
  }

  public void setPayMethod(PayMethod payMethod) {
    this.payMethod = payMethod;
  }

  public EmployeeDirectDeposit isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

   /**
   * Get isDeleted
   * @return isDeleted
  **/
 
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }

  public EmployeeDirectDeposit isPercentage(Boolean isPercentage) {
    this.isPercentage = isPercentage;
    return this;
  }

   /**
   * Get isPercentage
   * @return isPercentage
  **/
 
  public Boolean getIsPercentage() {
    return isPercentage;
  }

  public void setIsPercentage(Boolean isPercentage) {
    this.isPercentage = isPercentage;
  }

  public EmployeeDirectDeposit isRemainder(Boolean isRemainder) {
    this.isRemainder = isRemainder;
    return this;
  }

   /**
   * Get isRemainder
   * @return isRemainder
  **/
 
  public Boolean getIsRemainder() {
    return isRemainder;
  }

  public void setIsRemainder(Boolean isRemainder) {
    this.isRemainder = isRemainder;
  }

  public EmployeeDirectDeposit numberOfPreNoteDays(Integer numberOfPreNoteDays) {
    this.numberOfPreNoteDays = numberOfPreNoteDays;
    return this;
  }

   /**
   * Get numberOfPreNoteDays
   * @return numberOfPreNoteDays
  **/
 
  public Integer getNumberOfPreNoteDays() {
    return numberOfPreNoteDays;
  }

  public void setNumberOfPreNoteDays(Integer numberOfPreNoteDays) {
    this.numberOfPreNoteDays = numberOfPreNoteDays;
  }

  public EmployeeDirectDeposit prenoteFileRunPayDate(DateTime prenoteFileRunPayDate) {
    this.prenoteFileRunPayDate = prenoteFileRunPayDate;
    return this;
  }

   /**
   * Get prenoteFileRunPayDate
   * @return prenoteFileRunPayDate
  **/
 
  public DateTime getPrenoteFileRunPayDate() {
    return prenoteFileRunPayDate;
  }

  public void setPrenoteFileRunPayDate(DateTime prenoteFileRunPayDate) {
    this.prenoteFileRunPayDate = prenoteFileRunPayDate;
  }

  public EmployeeDirectDeposit prenoteFileSentOn(DateTime prenoteFileSentOn) {
    this.prenoteFileSentOn = prenoteFileSentOn;
    return this;
  }

   /**
   * Get prenoteFileSentOn
   * @return prenoteFileSentOn
  **/
 
  public DateTime getPrenoteFileSentOn() {
    return prenoteFileSentOn;
  }

  public void setPrenoteFileSentOn(DateTime prenoteFileSentOn) {
    this.prenoteFileSentOn = prenoteFileSentOn;
  }

  public EmployeeDirectDeposit requiresPreNote(Boolean requiresPreNote) {
    this.requiresPreNote = requiresPreNote;
    return this;
  }

   /**
   * Get requiresPreNote
   * @return requiresPreNote
  **/
 
  public Boolean getRequiresPreNote() {
    return requiresPreNote;
  }

  public void setRequiresPreNote(Boolean requiresPreNote) {
    this.requiresPreNote = requiresPreNote;
  }

  public EmployeeDirectDeposit routingTransitNumber(String routingTransitNumber) {
    this.routingTransitNumber = routingTransitNumber;
    return this;
  }

   /**
   * Get routingTransitNumber
   * @return routingTransitNumber
  **/
 
  public String getRoutingTransitNumber() {
    return routingTransitNumber;
  }

  public void setRoutingTransitNumber(String routingTransitNumber) {
    this.routingTransitNumber = routingTransitNumber;
  }

  public EmployeeDirectDeposit payCardType(String payCardType) {
    this.payCardType = payCardType;
    return this;
  }

   /**
   * Get payCardType
   * @return payCardType
  **/
 
  public String getPayCardType() {
    return payCardType;
  }

  public void setPayCardType(String payCardType) {
    this.payCardType = payCardType;
  }

  public EmployeeDirectDeposit financialInstitution(FinancialInstitution financialInstitution) {
    this.financialInstitution = financialInstitution;
    return this;
  }

   /**
   * Get financialInstitution
   * @return financialInstitution
  **/
 
  public FinancialInstitution getFinancialInstitution() {
    return financialInstitution;
  }

  public void setFinancialInstitution(FinancialInstitution financialInstitution) {
    this.financialInstitution = financialInstitution;
  }

  public EmployeeDirectDeposit accountHolder(String accountHolder) {
    this.accountHolder = accountHolder;
    return this;
  }

   /**
   * Get accountHolder
   * @return accountHolder
  **/
 
  public String getAccountHolder() {
    return accountHolder;
  }

  public void setAccountHolder(String accountHolder) {
    this.accountHolder = accountHolder;
  }

  public EmployeeDirectDeposit lastModifiedTimestamp(DateTime lastModifiedTimestamp) {
    this.lastModifiedTimestamp = lastModifiedTimestamp;
    return this;
  }

   /**
   * Get lastModifiedTimestamp
   * @return lastModifiedTimestamp
  **/
 
  public DateTime getLastModifiedTimestamp() {
    return lastModifiedTimestamp;
  }

  public void setLastModifiedTimestamp(DateTime lastModifiedTimestamp) {
    this.lastModifiedTimestamp = lastModifiedTimestamp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeDirectDeposit employeeDirectDeposit = (EmployeeDirectDeposit) o;
    return Objects.equals(this.accountNumber, employeeDirectDeposit.accountNumber) &&
        Objects.equals(this.bankName, employeeDirectDeposit.bankName) &&
        Objects.equals(this.bankNumber, employeeDirectDeposit.bankNumber) &&
        Objects.equals(this.buildingSocietyNumber, employeeDirectDeposit.buildingSocietyNumber) &&
        Objects.equals(this.depositNumber, employeeDirectDeposit.depositNumber) &&
        Objects.equals(this.depositValue, employeeDirectDeposit.depositValue) &&
        Objects.equals(this.payMethod, employeeDirectDeposit.payMethod) &&
        Objects.equals(this.isDeleted, employeeDirectDeposit.isDeleted) &&
        Objects.equals(this.isPercentage, employeeDirectDeposit.isPercentage) &&
        Objects.equals(this.isRemainder, employeeDirectDeposit.isRemainder) &&
        Objects.equals(this.numberOfPreNoteDays, employeeDirectDeposit.numberOfPreNoteDays) &&
        Objects.equals(this.prenoteFileRunPayDate, employeeDirectDeposit.prenoteFileRunPayDate) &&
        Objects.equals(this.prenoteFileSentOn, employeeDirectDeposit.prenoteFileSentOn) &&
        Objects.equals(this.requiresPreNote, employeeDirectDeposit.requiresPreNote) &&
        Objects.equals(this.routingTransitNumber, employeeDirectDeposit.routingTransitNumber) &&
        Objects.equals(this.payCardType, employeeDirectDeposit.payCardType) &&
        Objects.equals(this.financialInstitution, employeeDirectDeposit.financialInstitution) &&
        Objects.equals(this.accountHolder, employeeDirectDeposit.accountHolder) &&
        Objects.equals(this.lastModifiedTimestamp, employeeDirectDeposit.lastModifiedTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, bankName, bankNumber, buildingSocietyNumber, depositNumber, depositValue, payMethod, isDeleted, isPercentage, isRemainder, numberOfPreNoteDays, prenoteFileRunPayDate, prenoteFileSentOn, requiresPreNote, routingTransitNumber, payCardType, financialInstitution, accountHolder, lastModifiedTimestamp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeDirectDeposit {\n");
    
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    bankNumber: ").append(toIndentedString(bankNumber)).append("\n");
    sb.append("    buildingSocietyNumber: ").append(toIndentedString(buildingSocietyNumber)).append("\n");
    sb.append("    depositNumber: ").append(toIndentedString(depositNumber)).append("\n");
    sb.append("    depositValue: ").append(toIndentedString(depositValue)).append("\n");
    sb.append("    payMethod: ").append(toIndentedString(payMethod)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    isPercentage: ").append(toIndentedString(isPercentage)).append("\n");
    sb.append("    isRemainder: ").append(toIndentedString(isRemainder)).append("\n");
    sb.append("    numberOfPreNoteDays: ").append(toIndentedString(numberOfPreNoteDays)).append("\n");
    sb.append("    prenoteFileRunPayDate: ").append(toIndentedString(prenoteFileRunPayDate)).append("\n");
    sb.append("    prenoteFileSentOn: ").append(toIndentedString(prenoteFileSentOn)).append("\n");
    sb.append("    requiresPreNote: ").append(toIndentedString(requiresPreNote)).append("\n");
    sb.append("    routingTransitNumber: ").append(toIndentedString(routingTransitNumber)).append("\n");
    sb.append("    payCardType: ").append(toIndentedString(payCardType)).append("\n");
    sb.append("    financialInstitution: ").append(toIndentedString(financialInstitution)).append("\n");
    sb.append("    accountHolder: ").append(toIndentedString(accountHolder)).append("\n");
    sb.append("    lastModifiedTimestamp: ").append(toIndentedString(lastModifiedTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

