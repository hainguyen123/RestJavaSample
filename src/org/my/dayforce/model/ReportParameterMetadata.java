/*
 * Dayforce API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.my.dayforce.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;


import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.my.dayforce.model.ListValue;

/**
 * Report meta data that defines report parameters.  Parameter values are supplied by the end-user for execution.  All parameters must be supplied during execution.  Not all Parameters have default value.
 */

public class ReportParameterMetadata {
  @SerializedName("Name")
  private String name = null;

  @SerializedName("DisplayName")
  private String displayName = null;

  @SerializedName("ReportParameterMetadataId")
  private UUID reportParameterMetadataId = null;

  @SerializedName("DataType")
  private String dataType = null;

  @SerializedName("Operator")
  private String operator = null;

  @SerializedName("DefaultValue")
  private String defaultValue = null;

  @SerializedName("IsRequired")
  private Boolean isRequired = null;

  @SerializedName("AvailableValues")
  private List<ListValue> availableValues = new ArrayList<ListValue>();

  public ReportParameterMetadata name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the parameter.
   * @return name
  **/
 
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ReportParameterMetadata displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Human readable name of the parameter.
   * @return displayName
  **/
 
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public ReportParameterMetadata reportParameterMetadataId(UUID reportParameterMetadataId) {
    this.reportParameterMetadataId = reportParameterMetadataId;
    return this;
  }

   /**
   * Unique Id of parameter.
   * @return reportParameterMetadataId
  **/
 
  public UUID getReportParameterMetadataId() {
    return reportParameterMetadataId;
  }

  public void setReportParameterMetadataId(UUID reportParameterMetadataId) {
    this.reportParameterMetadataId = reportParameterMetadataId;
  }

  public ReportParameterMetadata dataType(String dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * Data type of the parameter.
   * @return dataType
  **/
 
  public String getDataType() {
    return dataType;
  }

  public void setDataType(String dataType) {
    this.dataType = dataType;
  }

  public ReportParameterMetadata operator(String operator) {
    this.operator = operator;
    return this;
  }

   /**
   * Operator type of the parameter, such as =, &lt;, &gt;=, etc...  Not all parameters have operator type.  For example, SQL Parameters don't have operators.
   * @return operator
  **/
 
  public String getOperator() {
    return operator;
  }

  public void setOperator(String operator) {
    this.operator = operator;
  }

  public ReportParameterMetadata defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * Default value that will be used if no other value is provided for the parameter.  Not all parameters have default value.  End-user needs to supply a value in here if the parameter doesn't have value.  Reference values should contain Ids and be comma separated. E.g \"1,2,3\"
   * @return defaultValue
  **/
 
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }

  public ReportParameterMetadata isRequired(Boolean isRequired) {
    this.isRequired = isRequired;
    return this;
  }

   /**
   * True if a value needs to be supplied.
   * @return isRequired
  **/
 
  public Boolean getIsRequired() {
    return isRequired;
  }

  public void setIsRequired(Boolean isRequired) {
    this.isRequired = isRequired;
  }

  public ReportParameterMetadata availableValues(List<ListValue> availableValues) {
    this.availableValues = availableValues;
    return this;
  }

  public ReportParameterMetadata addAvailableValuesItem(ListValue availableValuesItem) {
    this.availableValues.add(availableValuesItem);
    return this;
  }

   /**
   * List of available values a parameter can have.
   * @return availableValues
  **/
 
  public List<ListValue> getAvailableValues() {
    return availableValues;
  }

  public void setAvailableValues(List<ListValue> availableValues) {
    this.availableValues = availableValues;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportParameterMetadata reportParameterMetadata = (ReportParameterMetadata) o;
    return Objects.equals(this.name, reportParameterMetadata.name) &&
        Objects.equals(this.displayName, reportParameterMetadata.displayName) &&
        Objects.equals(this.reportParameterMetadataId, reportParameterMetadata.reportParameterMetadataId) &&
        Objects.equals(this.dataType, reportParameterMetadata.dataType) &&
        Objects.equals(this.operator, reportParameterMetadata.operator) &&
        Objects.equals(this.defaultValue, reportParameterMetadata.defaultValue) &&
        Objects.equals(this.isRequired, reportParameterMetadata.isRequired) &&
        Objects.equals(this.availableValues, reportParameterMetadata.availableValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, displayName, reportParameterMetadataId, dataType, operator, defaultValue, isRequired, availableValues);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportParameterMetadata {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    reportParameterMetadataId: ").append(toIndentedString(reportParameterMetadataId)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("    availableValues: ").append(toIndentedString(availableValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

